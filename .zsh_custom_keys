# zsh plugin auto completetion
bindkey "^M" autosuggest-execute
bindkey "^O" accept-line

# text-modifier keys
bindkey "^[k" backward-delete-word
bindkey "^[m" forward-delete-word

bindkey "^[b" backward-word
# bindkey "^[b" forward-word
bindkey "^[q" kill-line

# fzf custom keys
fd_extra_args="
   --hidden .\
   --ignore-case\
	--exclude node_modules\
	--exclude .fnm\
	--exclude .npm\
	--exclude .cache\
	--exclude gem\
	--exclude skypeforlinux\
	--exclude Postman\
	--exclude Rambox\
	--exclude .git\
	--exclude .var\
	--exclude libreoffice\
	--exclude google-chrome\
	--exclude proc\
	--exclude themes\
	--exclude plugins\
	--exclude .icons\
	--exclude .docker\
	--exclude .bun\
	--exclude .java\
	--exclude .pki\
	--exclude .oh-my-zsh\
	--exclude /go/\
	--exclude /.config/BraveSoftware\
	--exclude Steam\
	--exclude pnpm\
	--exclude pack\
	--exclude TabNine\
	--exclude /.local/lib\
	"

jira() {
  echo -n "Jira ticket ID: "
  read -r ticket_id
  typeset -u ticket_id="$ticket_id"
  ticket_id=${ticket_id// /-}

  echo -n "Commit type: "
  read -r commit_type

  echo -n "Commit scope: "
  IFS= read -r commit_scope
  commit_scope=${commit_scope// /-}

  echo -n "Commit message: "
  IFS= read -r commit_message
  dashed_commit_message="${commit_message// /-}"

  git pull
  git checkout -b ${commit_type}/${ticket_id}-${dashed_commit_message}
  git add .
  git commit --no-verify -m "${commit_type}(${commit_scope}): [${ticket_id}] ${commit_message}"
  git push
}
zle -N jira
bindkey "\ep" jira

fzf-gbr() {
  branch="$(gbr -a | fzf --no-preview)"
  branch="${branch/remotes\/origin\//}"
  branch="${branch/\*/}"
  branch="${branch// /}"
	LBUFFER="$LBUFFER git checkout ${branch}"
  zle accept-line
}
zle -N fzf-gbr
bindkey "\eb" fzf-gbr

# fzf edit file
fzf-vi() {
	LBUFFER="$LBUFFER vi $(fd --type f $(echo $fd_extra_args) $HOME | fzf)"
  zle accept-line
}
zle -N fzf-vi
bindkey "\e;" fzf-vi

# fzf auto cd
fzf-cd () {
   dir="$(fd --type d $(echo $fd_extra_args) $HOME | fzf --preview '')"
   dir="${dir// /}"
   dir_len="${#dir}"

   if (($dir_len > 0)); then
     LBUFFER="$LBUFFER cd ${dir}"
     zle accept-line
   fi
}
zle -N fzf-cd
bindkey "\e " fzf-cd

# fzf-get file's path
fzf-file(){
  LBUFFER="$LBUFFER $(fd --type f $(echo $fd_extra_args) $HOME | fzf)"
}
zle -N fzf-file
bindkey "\ef" fzf-file

# fzf-get dir's path
fzf-dir(){
  LBUFFER="$LBUFFER $(fd --type d $(echo $fd_extra_args) $HOME | fzf --preview '')"
}
zle -N fzf-dir
bindkey "\ed" fzf-dir

my_widget() {
  # List of texts
  texts=("Text 1" "Text 2" "Text 3" "Text 4" "Text 5")

  # Use fzf to select a text
  selected_text=$(printf "%s\n" "${texts[@]}" | fzf --no-preview)

  echo "Selected text: $selected_text"
}

# Bind the function to a key combination
zle -N my-widget my_widget
bindkey '\ei' my-widget
